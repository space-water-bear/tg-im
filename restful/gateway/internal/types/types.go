// Code generated by goctl. DO NOT EDIT.
package types

type AddFriendRequest struct {
	FriendId int64  `json:"friendId"`
	Remark   string `json:"remark"`
}

type AddFriendResponse struct {
	Success bool `json:"success"`
}

type AddGroupRequest struct {
	GroupId int64  `json:"groupId"`
	Name    string `json:"name"`
}

type AddGroupResponse struct {
	Success bool `json:"success"`
}

type AddUserRequest struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

type AddUserResponse struct {
	UserId int64 `json:"userId"`
}

type DeleteFriendRequest struct {
	FriendId int64 `json:"friendId"`
}

type DeleteGroupRequest struct {
	GroupId int64 `json:"groupId"`
}

type DeleteUserRequest struct {
	ID int64 `path:"id"`
}

type DeleteUserResponse struct {
	Success bool `json:"success"`
}

type FriendDeleteResponse struct {
	Success bool `json:"success"`
}

type FriendInfoResponse struct {
	FriendId int64  `json:"friendId"`
	Username string `json:"username"`
	Nickname string `json:"nickname"`
	Email    string `json:"email"`
	Avatar   string `json:"avatar"`
}

type FriendListRequest struct {
	UserId int64  `form:"userId,optional"`
	Page   int32  `form:"page,default=1"`
	Size   int32  `form:"size,default=10"`
	Search string `form:"search,optional"`
}

type FriendListResponse struct {
	Rows  []FriendInfoResponse `json:"rows"`
	Total int32                `json:"total"`
}

type GroupDeleteResponse struct {
	Success bool `json:"success"`
}

type GroupInfoResponse struct {
	GroupId int64  `json:"groupId"`
	Name    string `json:"name"`
}

type GroupListRequest struct {
	UserId int64 `form:"userId,optional"`
	Page   int32 `form:"page,default=1"`
	Size   int32 `form:"size,default=10"`
}

type GroupListResponse struct {
	Groups []GroupInfoResponse `json:"groups"`
}

type LoginRequest struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type LoginResponse struct {
	UserId  int64  `json:"userId"`
	Token   string `json:"token"`
	Expire  int64  `json:"expire"`
	Refresh int64  `json:"refresh"`
}

type MessageHistoryListRequest struct {
	UserId int64 `url:"userId"`
	Page   int32 `url:"page"`
	Size   int32 `url:"size"`
}

type MessageHistoryListResponse struct {
	Rows  []MessageInfo `json:"rows"`
	Total int32         `json:"total"`
}

type MessageInfo struct {
	MessageId  int64  `json:"messageId"`  // 消息ID
	Types      int32  `json:"types"`      // 消息类型
	Content    string `json:"content"`    // 消息内容
	Timestamp  int64  `json:"timestamp"`  // 发送时间
	SenderId   int64  `json:"senderId"`   // 发送者ID
	ReceiverId int64  `json:"receiverId"` // 接收者ID
}

type MessageInfoRequest struct {
	Types       string `json:"types,options=text|image|video|file|audio|location|merge|command|rich_text|markdown" form:"types,options=text|image|video|file|audio|location|merge|command|rich_text|markdown"` // 消息类型
	Content     string `json:"content" form:"content"`                                                                                                                                                         // 消息内容
	ContentSize int32  `json:"contentSize" form:"contentSize"`                                                                                                                                                 // 消息内容大小
	Timestamp   int64  `json:"timestamp" form:"timestamp"`                                                                                                                                                     // 发送时间
	ReceiverId  int64  `json:"receiverId" form:"receiverId"`                                                                                                                                                   // 接收者ID
	ChatType    int32  `json:"chatType" form:"chatType"`                                                                                                                                                       // 聊天类型
}

type MessageInfoResponse struct {
	Success bool `json:"success"`
}

type RegisterRequest struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

type RegisterResponse struct {
	Success bool `json:"success"`
}

type UpdateFriendRequest struct {
	FriendId int64 `json:"friendId"`
	Status   int32 `json:"status"`
}

type UpdateFriendResponse struct {
	Success bool `json:"success"`
}

type UpdateGroupRequest struct {
	GroupId int64  `json:"groupId"`
	Name    string `json:"name"`
}

type UpdateGroupResponse struct {
	Success bool `json:"success"`
}

type UpdateUserInfoRequest struct {
	UserId   int64  `json:"userId"`
	Email    string `json:"email,optional"`
	NickName string `json:"nickName,optional"`
	Avatar   string `json:"avatar,optional"`
	Status   int32  `json:"status,optional"`
}

type UpdateUserResponse struct {
	Success bool `json:"success"`
}

type UserInfoRequest struct {
	ID string `path:"id"`
}

type UserInfoResponse struct {
	UserId   int64  `json:"userId"`
	Username string `json:"username"`
	NickName string `json:"nickName"`
}

type UserListRequest struct {
	Page     int32  `form:"page,default=1"`
	Size     int32  `form:"size,default=10"`
	Username string `form:"username,optional"`
	NickName string `form:"nickName,optional"`
}

type UserListResponse struct {
	Rows  []UserInfoResponse `json:"users"`
	Total int32              `json:"total"`
}
