syntax = "v1"

info (
	title:   "Gateway API"
	desc:    "API forwards requests to corresponding services"
	author:  "guang"
	date:    "2024-06-27"
	version: "1.0.0"
)

// 用户相关
type ( // 注册
	RegisterRequest {
		Username string `json:"username"`
		Password string `json:"password"`
		Email    string `json:"email"`
	}
	RegisterResponse {
		Success bool `json:"success"`
	}
)

type ( // 登陆
	LoginRequest {
		Username string `json:"username"`
		Password string `json:"password"`
	}
	LoginResponse {
		UserId  int64  `json:"userId"`
		Token   string `json:"token"`
		Expire  int64  `json:"expire"`
		Refresh int64  `json:"refresh"`
	}
)

@server (
	prefix: /api/v1
	group:  login
)
service gateway {
	@doc "Register a new user"
	@handler Register
	post /register (RegisterRequest) returns (RegisterResponse)

	@doc "Login"
	@handler Login
	post /login (LoginRequest) returns (LoginResponse)
}

type ( // 用户信息
	UserInfoRequest {
		ID string `path:"id"`
	}
	UserInfoResponse {
		UserId   int64  `json:"userId"`
		Username string `json:"username"`
		NickName string `json:"nickName"`
	}
	UserListRequest {
		Page     int32  `form:"page,default=1"`
		Size     int32  `form:"size,default=10"`
		Username string `form:"username,optional"`
		NickName string `form:"nickName,optional"`
	}
	UserListResponse {
		Rows  []UserInfoResponse `json:"users"`
		Total int32              `json:"total"`
	}
)

type ( // 用户-添加
	AddUserRequest {
		Username string `json:"username"`
		Password string `json:"password"`
		Email    string `json:"email"`
	}
	AddUserResponse {
		UserId int64 `json:"userId"`
	}
)

type ( // 用户-更新
	UpdateUserInfoRequest {
		UserId   int64  `json:"userId"`
		Email    string `json:"email,optional"`
		NickName string `json:"nickName,optional"`
		Avatar   string `json:"avatar,optional"`
		Status   int32  `json:"status,optional"`
	}
	UpdateUserResponse {
		Success bool `json:"success"`
	}
)

type ( // 用户-删除
	DeleteUserRequest {
		ID int64 `path:"id"`
	}
	DeleteUserResponse {
		Success bool `json:"success"`
	}
)

@server (
	prefix: /api/v1
	group:  user
	jwt:    Auth
)
service gateway {
	@doc "Get user info"
	@handler UserInfo
	get /user/:id (UserInfoRequest) returns (UserInfoResponse)

	@doc "Get user list"
	@handler UserList
	get /user (UserListRequest) returns (UserListResponse)

	@doc "Add a new user"
	@handler UserAdd
	post /user (AddUserRequest) returns (AddUserResponse)

	@doc "Update user info"
	@handler UserUpdate
	put /user (UpdateUserInfoRequest) returns (UpdateUserResponse)

	@doc "Update user info"
	@handler UserPatch
	patch /user (UpdateUserInfoRequest) returns (UpdateUserResponse)

	@doc "Delete user"
	@handler UserDelete
	delete /user/:id (DeleteUserRequest) returns (DeleteUserResponse)
}

// 好友相关
type ( // 好友信息
	FriendInfoResponse {
		FriendId int64  `json:"friendId"`
		Username string `json:"username"`
		Nickname string `json:"nickname"`
		Email    string `json:"email"`
		Avatar   string `json:"avatar"`
	}
	FriendListRequest {
		UserId int64  `form:"userId,optional"`
		Page   int32  `form:"page,default=1"`
		Size   int32  `form:"size,default=10"`
		Search string `form:"search,optional"`
	}
	FriendListResponse {
		Rows  []FriendInfoResponse `json:"rows"`
		Total int32                `json:"total"`
	}
)

type ( // 好友-添加
	AddFriendRequest {
		FriendId int64  `json:"friendId"`
		Remark   string `json:"remark"`
	}
	AddFriendResponse {
		Success bool `json:"success"`
	}
)

type ( // 好友-更新
	UpdateFriendRequest {
		FriendId int64 `json:"friendId"`
		Status   int32 `json:"status"`
	}
	UpdateFriendResponse {
		Success bool `json:"success"`
	}
)

type ( // 好友-删除
	DeleteFriendRequest {
		FriendId int64 `json:"friendId"`
	}
	FriendDeleteResponse {
		Success bool `json:"success"`
	}
)

@server (
	prefix: /api/v1
	group:  friend
	jwt:    Auth
)
service gateway {
	@doc "Get friend info"
	@handler FriendInfo
	get /friend/:id returns (FriendInfoResponse)

	@doc "Get friend list"
	@handler FriendList
	get /friend (FriendListRequest) returns (FriendListResponse)

	@doc "Add a new friend"
	@handler FriendAdd
	post /friend (AddFriendRequest) returns (AddFriendResponse)

	@doc "Update friend info"
	@handler FriendUpdate
	put /friend (UpdateFriendRequest) returns (UpdateFriendResponse)

	@doc "Delete friend"
	@handler FriendDelete
	delete /friend (DeleteFriendRequest) returns (FriendDeleteResponse)
}

// 群组相关
type ( // 群组信息
	GroupInfoResponse {
		GroupId int64  `json:"groupId"`
		Name    string `json:"name"`
	}
	GroupListRequest {
		UserId int64 `form:"userId,optional"`
		Page   int32 `form:"page,default=1"`
		Size   int32 `form:"size,default=10"`
	}
	GroupListResponse {
		Groups []GroupInfoResponse `json:"groups"`
	}
)

type ( // 群组-添加
	AddGroupRequest {
		GroupId int64  `json:"groupId"`
		Name    string `json:"name"`
	}
	AddGroupResponse {
		Success bool `json:"success"`
	}
)

type ( // 群组-更新
	UpdateGroupRequest {
		GroupId int64  `json:"groupId"`
		Name    string `json:"name"`
	}
	UpdateGroupResponse {
		Success bool `json:"success"`
	}
)

type ( // 群组-删除
	DeleteGroupRequest {
		GroupId int64 `json:"groupId"`
	}
	GroupDeleteResponse {
		Success bool `json:"success"`
	}
)

@server (
	prefix: /api/v1
	group:  group
	jwt:    Auth
)
service gateway {
	@doc "Get group info"
	@handler GroupInfo
	get /group/:id returns (GroupInfoResponse)

	@doc "Get group list"
	@handler GroupList
	get /group (GroupListRequest) returns (GroupListResponse)

	@doc "Add a new group"
	@handler GroupAdd
	post /group (AddGroupRequest) returns (AddGroupResponse)

	@doc "Update group info"
	@handler GroupUpdate
	put /group (UpdateGroupRequest) returns (UpdateGroupResponse)

	@doc "Update group info"
	@handler GroupPatch
	patch /group (UpdateGroupRequest) returns (UpdateGroupResponse)

	@doc "Delete group"
	@handler GroupDelete
	delete /group (DeleteGroupRequest) returns (GroupDeleteResponse)
}

type (
	MessageInfo {
		MessageId  int64  `json:"messageId"` // 消息ID
		Types      int32  `json:"types"` // 消息类型
		Content    string `json:"content"` // 消息内容
		Timestamp  int64  `json:"timestamp"` // 发送时间
		SenderId   int64  `json:"senderId"` // 发送者ID
		ReceiverId int64  `json:"receiverId"` // 接收者ID
	}
	MessageInfoRequest {
		Types       string `json:"types,options=text|image|video|file|audio|location|merge|command|rich_text|markdown" form:"types,options=text|image|video|file|audio|location|merge|command|rich_text|markdown"` // 消息类型
		Content     string `json:"content" form:"content"` // 消息内容
		ContentSize int32  `json:"contentSize" form:"contentSize"` // 消息内容大小
		Timestamp   int64  `json:"timestamp" form:"timestamp"` // 发送时间
		ReceiverId  int64  `json:"receiverId" form:"receiverId"` // 接收者ID
		ChatType    int32  `json:"chatType" form:"chatType"` // 聊天类型
	}
	MessageInfoResponse {
		Success bool `json:"success"`
	}
	MessageHistoryListRequest {
		UserId int64 `url:"userId"`
		Page   int32 `url:"page"`
		Size   int32 `url:"size"`
	}
	MessageHistoryListResponse {
		Rows  []MessageInfo `json:"rows"`
		Total int32         `json:"total"`
	}
)

@server (
	prefix: /api/v1
	group:  message
	jwt:    Auth
)
service gateway {
	@doc "Send message"
	@handler MessageSend
	post /message (MessageInfoRequest) returns (MessageInfoResponse)

	@doc "Send file type message" // image|audio|video|file
	@handler MessageFileSend
	post /message/file returns (MessageInfoResponse)

	@doc "Get message history"
	@handler MessageHistory
	get /message (MessageHistoryListRequest) returns (MessageHistoryListResponse)
}

