// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"time"

	"gorm.io/gorm"
)

type (
	friendsModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Friends) error

		FindOne(ctx context.Context, id int64) (*Friends, error)
		FindOneByUserIdFriendId(ctx context.Context, userId int64, friendId int64) (*Friends, error)
		Update(ctx context.Context, tx *gorm.DB, data *Friends) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultFriendsModel struct {
		conn  *gorm.DB
		table string
	}

	Friends struct {
		Id               int64          `gorm:"column:id"`
		UserId           int64          `gorm:"column:user_id"`
		FriendId         int64          `gorm:"column:friend_id"`
		Status           int64          `gorm:"column:status"` // 1.同意，2.等待，3.拒绝
		CreatedAt        time.Time      `gorm:"column:created_at"`
		UpdatedAt        time.Time      `gorm:"column:updated_at"`
		FriendNickname   string         `gorm:"column:friend_nickname"`
		FriendAvatar     sql.NullString `gorm:"column:friend_avatar"`
		FriendCustomName sql.NullString `gorm:"column:friend_custom_name"`
		Remark           sql.NullString `gorm:"column:remark"`
		RequestStatus    sql.NullBool   `gorm:"column:request_status"` // 是否请求
		FriendUsername   string         `gorm:"column:friend_username"`
		FriendEmail      sql.NullString `gorm:"column:friend_email"`
	}
)

func (Friends) TableName() string {
	return `"public"."friends"`
}

func newFriendsModel(conn *gorm.DB) *defaultFriendsModel {
	return &defaultFriendsModel{
		conn:  conn,
		table: `"public"."friends"`,
	}
}

func (m *defaultFriendsModel) Insert(ctx context.Context, tx *gorm.DB, data *Friends) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultFriendsModel) FindOne(ctx context.Context, id int64) (*Friends, error) {
	var resp Friends
	err := m.conn.WithContext(ctx).Model(&Friends{}).Where("id = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendsModel) FindOneByUserIdFriendId(ctx context.Context, userId int64, friendId int64) (*Friends, error) {
	var resp Friends
	err := m.conn.WithContext(ctx).Model(&Friends{}).Where("user_id = $1 and friend_id = $2", userId, friendId).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendsModel) Update(ctx context.Context, tx *gorm.DB, data *Friends) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultFriendsModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&Friends{}, id).Error

	return err
}

func (m *defaultFriendsModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
