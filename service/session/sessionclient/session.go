// Code generated by goctl. DO NOT EDIT.
// Source: session.proto

package sessionclient

import (
	"context"

	"im2/service/session/session"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CloseSessionRequest   = session.CloseSessionRequest
	CloseSessionResponse  = session.CloseSessionResponse
	CreateSessionRequest  = session.CreateSessionRequest
	CreateSessionResponse = session.CreateSessionResponse
	GetSessionRequest     = session.GetSessionRequest
	SessionInfo           = session.SessionInfo

	Session interface {
		CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
		CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error)
		GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*SessionInfo, error)
	}

	defaultSession struct {
		cli zrpc.Client
	}
)

func NewSession(cli zrpc.Client) Session {
	return &defaultSession{
		cli: cli,
	}
}

func (m *defaultSession) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	client := session.NewSessionClient(m.cli.Conn())
	return client.CreateSession(ctx, in, opts...)
}

func (m *defaultSession) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error) {
	client := session.NewSessionClient(m.cli.Conn())
	return client.CloseSession(ctx, in, opts...)
}

func (m *defaultSession) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*SessionInfo, error) {
	client := session.NewSessionClient(m.cli.Conn())
	return client.GetSession(ctx, in, opts...)
}
